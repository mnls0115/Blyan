version: '3.8'

services:
  # Redis for sessions and nonce storage (production-hardened)
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost for security
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf:ro
      - ./redis-users.acl:/etc/redis/users.acl:ro
      - redis_certs:/etc/redis/certs:ro
      - redis_logs:/var/log/redis
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-changeMe123}
      - REDIS_API_PASSWORD=${REDIS_API_PASSWORD:-apiPass789}
      - REDIS_LEDGER_PASSWORD=${REDIS_LEDGER_PASSWORD:-ledgerPass456}
      - REDIS_ADMIN_PASSWORD=${REDIS_ADMIN_PASSWORD:-adminPass321}
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      - blyan_network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-changeMe123}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for ledger (production)
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: blyan_db
      POSTGRES_USER: blyan_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-changeMe456}
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost for security
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./migrations/001_create_ledger.sql:/docker-entrypoint-initdb.d/001_create_ledger.sql:ro
    networks:
      - blyan_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U blyan_user -d blyan_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Main API server
  api:
    build: .
    restart: always
    ports:
      - "8000:8000"
    environment:
      # Redis
      REDIS_URL: redis://:${REDIS_PASSWORD:-changeMe123}@redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-changeMe123}
      
      # Database
      DATABASE_URL: postgresql://blyan_user:${DB_PASSWORD:-changeMe456}@postgres:5432/blyan_db
      
      # Stripe
      STRIPE_SECRET_KEY: ${STRIPE_SECRET_KEY}
      STRIPE_WEBHOOK_SECRET: ${STRIPE_WEBHOOK_SECRET}
      STRIPE_PUBLISHABLE_KEY: ${STRIPE_PUBLISHABLE_KEY}
      
      # Ethereum
      INFURA_PROJECT_ID: ${INFURA_PROJECT_ID}
      
      # Teacher Model
      BLYAN_TEACHER_CKPT: /models/teacher_v17-int8.safetensors
      
      # Environment
      ENVIRONMENT: ${ENVIRONMENT:-production}
      
    volumes:
      - ./data:/app/data
      - ./models:/models
      - ./logs:/app/logs
    depends_on:
      - redis
      - postgres
    networks:
      - blyan_network
    command: python3 startup.py

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./frontend:/usr/share/nginx/html:ro
    depends_on:
      - api
    networks:
      - blyan_network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - blyan_network

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    restart: always
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - blyan_network

networks:
  blyan_network:
    driver: bridge

volumes:
  redis_data:
  redis_certs:
  redis_logs:
  postgres_data:
  prometheus_data:
  grafana_data: